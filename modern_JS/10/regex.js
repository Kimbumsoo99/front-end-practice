// 정규 표현식
const regexp = /\d{3}/; //숫자 3자리를 나타냄
console.log(regexp.test("Hel"), regexp.test("123"));

// 정규 표현식 메서드 .test() .exec()
// .test는 위에 참고 정규 표현식 일치하면 true
// .exec는 일치하면 문자열 반환 없으면 null
console.log(regexp.exec("Hel"), regexp.exec("123"));

let str = "ES2015 is powerful!";
console.log(str.match(/ES6/)); //ES6 이라는 문자열 있는지 체크
console.log(str.replace(/ES2015/, "ES6"));

// 정규 표현식 플래그 (옵션)
// i >> 영문 대소문자 구분 X
// g >> 패턴과 일치하는것 모두 찾기
// m >> 문자열의 행이 바꿔도 검색

// 정규 표현식 클래스
// \d 0~9 사이 숫자
// \D 숫자가 아닌 모든 문자
// \s 공백, 탭, 줄바꿈
// \S 공백이 아닌 모든 문자
// \w 단어
// \W 단어 제외 모든 문자

// ^ 문자열의 시작 / $ 문자열의 끝
// [^] 처럼 [] 안에 ^가 있으면 NOT에 의미

// {} 반복
// | OR
// 이외에도 많음

//아래는 자주 사용하는 정규식
/^[0-9]+$/; //숫자만 가능
/^[1-9]\d*$/; //양의 정수
/^\-[1-9]\d*$/; //음의 정수
/^[a-zA-Z]+$/; // 영문자만 가능
/^[a-zA-Z0-9]+$/; //숫자 영문자 가능
/^[가-힣]*$/; //한글만 가능
/^.{ 5, 10 }$/; //길이가 5~10개
/^[a-z0-9_+.-]+@([a-z0-9-]+\.)+[a-z0-9]{2,4}$/; //이메일만 가능
/(\d{3}).*(\d{3}).*(\d{4})/; //전화번호 체크
/([^\s]+(?=\.(jpg|gif|png))\.\2)/; //그림 파일
/^[1-9]{1}$|^[1-4]{1}[0-9]{1}$|^n$/; //1부터 n 사이의 번호(1과 n 포함)
/(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,}/; // 암호 체크 - 최소 영문 소문자 하나와 대문자, 숫자가 각각 1 개씩 포함되어 있는 문자열 (8글자 이상)

console.log(str);
console.log([...str]); //전개 연산자 ES6에 도입
console.log(str.split(""));
console.log(Array.from(str)); //ES6부터 사용 가능
